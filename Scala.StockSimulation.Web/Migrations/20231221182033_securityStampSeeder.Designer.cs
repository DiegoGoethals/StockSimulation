// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Scala.StockSimulation.Web.Data;

#nullable disable

namespace Scala.StockSimulation.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231221182033_securityStampSeeder")]
    partial class securityStampSeeder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f74f1598-1d21-42a9-a776-436e5afe7b87"),
                            ConcurrencyStamp = "073b577c-5a8c-4ef0-9e3b-99d4bb16724a",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("1fc2b645-543c-41d3-9550-2f07976a432b"),
                            ConcurrencyStamp = "8a5b0e48-22e8-48b0-b528-550b2c851bec",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("f7625794-3cf1-4930-ab8b-84e1d985d3b2"),
                            RoleId = new Guid("1fc2b645-543c-41d3-9550-2f07976a432b")
                        },
                        new
                        {
                            UserId = new Guid("95c984ea-29ca-4461-a4b3-b6661ac8bd62"),
                            RoleId = new Guid("1fc2b645-543c-41d3-9550-2f07976a432b")
                        },
                        new
                        {
                            UserId = new Guid("7179b705-0c38-4722-af63-72dddd9e72e0"),
                            RoleId = new Guid("1fc2b645-543c-41d3-9550-2f07976a432b")
                        },
                        new
                        {
                            UserId = new Guid("73534204-bddc-46f6-9968-6682b189c246"),
                            RoleId = new Guid("1fc2b645-543c-41d3-9550-2f07976a432b")
                        },
                        new
                        {
                            UserId = new Guid("1a9de52d-6226-45eb-ba39-ed5ca28e7059"),
                            RoleId = new Guid("f74f1598-1d21-42a9-a776-436e5afe7b87")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Lastname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f7625794-3cf1-4930-ab8b-84e1d985d3b2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c39dc94b-8d36-420f-a781-eb63396e078f",
                            Created = new DateTime(2023, 12, 21, 19, 20, 33, 301, DateTimeKind.Local).AddTicks(101),
                            Deleted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "diegoetha@howest.be",
                            EmailConfirmed = false,
                            Firstname = "Diego",
                            Lastname = "Goethals",
                            LockoutEnabled = false,
                            NormalizedEmail = "DIEGOGOETHA@HOWEST.BE",
                            NormalizedUserName = "DIEGOGOETHA@HOWEST.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEFDLaht8OZnOM5xIfz0xsg2Jb21z9MvNeKGjCkpVukk/nBpdAiwBlcWfanryS8/ajw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6ab42615-bce1-4a59-af29-50e32dde6492",
                            TwoFactorEnabled = false,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "diegoetha@howest.be"
                        },
                        new
                        {
                            Id = new Guid("95c984ea-29ca-4461-a4b3-b6661ac8bd62"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d172981a-97d8-4d2b-84a0-821219a03ba5",
                            Created = new DateTime(2023, 12, 21, 19, 20, 33, 301, DateTimeKind.Local).AddTicks(123),
                            Deleted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "quinaspe@howest.be",
                            EmailConfirmed = false,
                            Firstname = "Quinten",
                            Lastname = "Aspeslagh",
                            LockoutEnabled = false,
                            NormalizedEmail = "QUINASPE@HOWEST.BE",
                            NormalizedUserName = "QUINASPE@HOWEST.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ6v6OFFRFXjB6Mf/Fb6lWpo/4P1SpHGl4gRivSUcFGPr5CqKfcB9EfbJwemrbtrig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "062f639d-5909-47ac-8fee-366f399b2dfe",
                            TwoFactorEnabled = false,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "quinaspe@howest.be"
                        },
                        new
                        {
                            Id = new Guid("7179b705-0c38-4722-af63-72dddd9e72e0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f34c5856-7d64-4c57-a2af-5e57b9b8963b",
                            Created = new DateTime(2023, 12, 21, 19, 20, 33, 301, DateTimeKind.Local).AddTicks(136),
                            Deleted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bluevos@howest.be",
                            EmailConfirmed = false,
                            Firstname = "Blue",
                            Lastname = "Vosselman",
                            LockoutEnabled = false,
                            NormalizedEmail = "BLUEVOS@HOWEST.BE",
                            NormalizedUserName = "BLUEVOS@HOWEST.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEM+RXnr8YHjzX1P+TmX5nnGrNcxPD+4dJZxPHVms9WB8GVn362mWbZsUFkWh/kfnFg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c7bb2e57-926d-4537-a96a-49ee51f1e7af",
                            TwoFactorEnabled = false,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "bluevos@howest.be"
                        },
                        new
                        {
                            Id = new Guid("73534204-bddc-46f6-9968-6682b189c246"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "52ab9c8c-a604-43b3-bfed-c59bbcafb205",
                            Created = new DateTime(2023, 12, 21, 19, 20, 33, 301, DateTimeKind.Local).AddTicks(142),
                            Deleted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alexver@howest.be",
                            EmailConfirmed = false,
                            Firstname = "Alekxander",
                            Lastname = "Verhaeghe",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXVER@HOWEST.BE",
                            NormalizedUserName = "ALEXVER@HOWEST.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEPfTPuCg/E4w1jVvqIlGv+pPyyVhw8zTvmgfY0bRN1oePm590qFsxCuuF+hFwPXZSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "96027029-5f5c-4825-8a0c-46b7c6a2039e",
                            TwoFactorEnabled = false,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "alexver@howest.be"
                        },
                        new
                        {
                            Id = new Guid("1a9de52d-6226-45eb-ba39-ed5ca28e7059"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e30f7abf-59fb-4207-b53b-fb8afda27964",
                            Created = new DateTime(2023, 12, 21, 19, 20, 33, 295, DateTimeKind.Local).AddTicks(5883),
                            Deleted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@howest.be",
                            EmailConfirmed = true,
                            Firstname = "Admin",
                            Lastname = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HOWEST.BE",
                            NormalizedUserName = "ADMIN@HOWEST.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEIOJsSDwNkBMSRfpKxxL/tMYavmIikABNdgNTP56agBv2SXRgY9GN8fACdNjdB+mHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2660b159-df88-48e9-b9cc-37d3d168fc97",
                            TwoFactorEnabled = false,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "admin@howest.be"
                        });
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDelivered")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsTemporary")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("OrderTypeId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.OrderType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OrderTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("76a9b85d-9e0a-40fa-b863-63109835b7b6"),
                            Created = new DateTime(2023, 12, 21, 19, 20, 33, 322, DateTimeKind.Local).AddTicks(3000),
                            Deleted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Leverancier",
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("86f60a20-86c9-4919-b550-20ebd650ef33"),
                            Created = new DateTime(2023, 12, 21, 19, 20, 33, 322, DateTimeKind.Local).AddTicks(3010),
                            Deleted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Klant",
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArticleNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InitialMaximumStock")
                        .HasColumnType("int");

                    b.Property<int>("InitialMinimumStock")
                        .HasColumnType("int");

                    b.Property<int>("InitialStock")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db506532-c832-487e-9524-d8115d28a45b"),
                            ArticleNumber = "bkc1",
                            Created = new DateTime(2023, 12, 21, 19, 20, 33, 322, DateTimeKind.Local).AddTicks(3031),
                            Deleted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Broodje met kip curry beleg",
                            InitialMaximumStock = 500,
                            InitialMinimumStock = 100,
                            InitialStock = 150,
                            Name = "Broodje Kip Curry",
                            Price = 1.20m,
                            SupplierId = new Guid("bd028f20-d7aa-4d36-8366-83020d4e4da0"),
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ef8f0978-3810-42fb-9f47-f5e844bc4af0"),
                            ArticleNumber = "brs1",
                            Created = new DateTime(2023, 12, 21, 19, 20, 33, 322, DateTimeKind.Local).AddTicks(3034),
                            Deleted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Broodje met kaas en ham",
                            InitialMaximumStock = 500,
                            InitialMinimumStock = 100,
                            InitialStock = 180,
                            Name = "Broodje Smos",
                            Price = 7.20m,
                            SupplierId = new Guid("bd028f20-d7aa-4d36-8366-83020d4e4da0"),
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("03387470-8ef8-45ec-b545-dfd5b16b73a3"),
                            ArticleNumber = "pp1",
                            Created = new DateTime(2023, 12, 21, 19, 20, 33, 322, DateTimeKind.Local).AddTicks(3037),
                            Deleted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Pizza met pepperoni",
                            InitialMaximumStock = 500,
                            InitialMinimumStock = 100,
                            InitialStock = 150,
                            Name = "Pizza Pepperoni",
                            Price = 6.70m,
                            SupplierId = new Guid("c26f0950-d5d5-4b79-bad7-58c65f8ac46d"),
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b5510c6d-299c-495a-b77c-7c6c20b92567"),
                            ArticleNumber = "pm1",
                            Created = new DateTime(2023, 12, 21, 19, 20, 33, 322, DateTimeKind.Local).AddTicks(3039),
                            Deleted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Standaard pizza",
                            InitialMaximumStock = 500,
                            InitialMinimumStock = 100,
                            InitialStock = 160,
                            Name = "Pizza Margherita",
                            Price = 6.80m,
                            SupplierId = new Guid("c26f0950-d5d5-4b79-bad7-58c65f8ac46d"),
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bd028f20-d7aa-4d36-8366-83020d4e4da0"),
                            Created = new DateTime(2023, 12, 21, 19, 20, 33, 295, DateTimeKind.Local).AddTicks(5707),
                            Deleted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Panos",
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c26f0950-d5d5-4b79-bad7-58c65f8ac46d"),
                            Created = new DateTime(2023, 12, 21, 19, 20, 33, 295, DateTimeKind.Local).AddTicks(5748),
                            Deleted = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pizza Hut",
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.UserProductState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("FictionalStock")
                        .HasColumnType("int");

                    b.Property<int>("MaximumStock")
                        .HasColumnType("int");

                    b.Property<int>("MinimumStock")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PhysicalStock")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ReservedStock")
                        .HasColumnType("int");

                    b.Property<int>("SoonAvailableStock")
                        .HasColumnType("int");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("UserProductStates");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Scala.StockSimulation.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Scala.StockSimulation.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scala.StockSimulation.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Scala.StockSimulation.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.Order", b =>
                {
                    b.HasOne("Scala.StockSimulation.Core.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scala.StockSimulation.Core.Entities.OrderType", "OrderType")
                        .WithMany("Orders")
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("OrderType");
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.OrderItem", b =>
                {
                    b.HasOne("Scala.StockSimulation.Core.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scala.StockSimulation.Core.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.Product", b =>
                {
                    b.HasOne("Scala.StockSimulation.Core.Entities.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.UserProductState", b =>
                {
                    b.HasOne("Scala.StockSimulation.Core.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("UserProductStates")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scala.StockSimulation.Core.Entities.Product", "Product")
                        .WithMany("UserProductStates")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("UserProductStates");
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.OrderType", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("UserProductStates");
                });

            modelBuilder.Entity("Scala.StockSimulation.Core.Entities.Supplier", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
